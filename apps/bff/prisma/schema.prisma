generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountRole {
  seller
  warehouse
}

model Account {
  accountAddress   String   @id @map("account_address")
  role             AccountRole
  profileHashAlgo  String   @default("blake3") @map("profile_hash_algo")
  profileHashValue String   @map("profile_hash_value")
  profileUri       String?  @map("profile_uri")
  registeredBy     String   @map("registered_by")
  txnVersion       BigInt   @map("txn_version")
  eventIndex       BigInt   @map("event_index")
  txnHash          String   @map("txn_hash")
  chainTimestamp   DateTime @map("chain_timestamp")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@unique([txnVersion, eventIndex], map: "accounts_event_uniq")
  @@map("accounts")
}


model MediaAsset {
  id              BigInt   @id @default(autoincrement())
  recordUid       String   @map("record_uid")
  stage           String
  category        String
  storagePath     String   @map("storage_path")
  publicPath      String?  @map("public_path")
  hashAlgo        String   @map("hash_algo")
  hashValue       String   @map("hash_value")
  mimeType        String?  @map("mime_type")
  sizeBytes       Int?     @map("size_bytes")
  uploadedBy      String?  @map("uploaded_by")
  uploadedAt      DateTime @default(now()) @map("uploaded_at")
  matchedOffchain Boolean  @default(false) @map("matched_offchain")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([recordUid, storagePath], map: "media_assets_record_path_uniq")
  @@index([recordUid], map: "media_assets_record_uid_idx")
  @@index([hashValue], map: "media_assets_hash_value_idx")
  @@map("media_assets")
}

